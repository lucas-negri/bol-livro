@model Bookstore.Models.Genre

@{
    ViewData["Title"] = "Editar Gênero Literário";
}

<h1>@ViewData["Title"]</h1>

<h4 class="lead">Altere as informações desejadas abaixo</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Salvar Alterações" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Voltar para a lista</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult>
    Edit(int id, Genre genre)
    {
    if (!ModelState.IsValid)
    {
    return View();
    }

    if (id != genre.Id) {
    return RedirectToAction(nameof(Error), new { message = "Id's não condizentes" });
    }

    try
    {
    await _service.UpdateAsync(genre);
    return RedirectToAction(nameof(Index));
    }
    catch (ApplicationException ex)
    {
    return RedirectToAction(nameof(Error), new { message = ex.Message });
    }
    }
